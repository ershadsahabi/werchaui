صفحه فروشگاه پتشاپی نکست رو بهت نشون میدم. همه چیزش کامله. متوجهش شدی فقط بگو آره متوجه شدم. من خواسته ام پیام بعدیست

// src\lib\api.ts

// Detect server vs client
const isServer = typeof window === 'undefined';

// Priority for SSR (Node): INTERNAL first, then NEXT_PUBLIC
// Priority for CSR (Browser): NEXT_PUBLIC only
const rawBase = isServer
  ? (process.env.INTERNAL_API_BASE_URL || process.env.NEXT_PUBLIC_API_BASE_URL || 'http://localhost:8000')
  : (process.env.NEXT_PUBLIC_API_BASE_URL || 'http://localhost:8000');

// Normalize (remove trailing slash)
export const API_BASE = rawBase.replace(/\/$/, '');

export const endpoints = {
  // Accounts
  csrf:       `${API_BASE}/api/accounts/csrf/`,
  register:   `${API_BASE}/api/accounts/register/`,
  login:      `${API_BASE}/api/accounts/login/`,
  logout:     `${API_BASE}/api/accounts/logout/`,
  me:         `${API_BASE}/api/accounts/me/`,

  // Shop
  products:    `${API_BASE}/api/catalog/products/`,
  orderCreate: `${API_BASE}/api/orders/create/`,
  lastAddress: `${API_BASE}/api/orders/last-address/`,

  // Blog (جدید)
  blogIndex:     `${API_BASE}/api/blog/posts/`,            // GET (list)
  blogPosts:     `${API_BASE}/api/blog/posts/`,            // + <slug>/  → GET (detail)
  blogCategories:`${API_BASE}/api/blog/categories/`,       // GET
  blogRefs:      `${API_BASE}/api/blog/references/`,       // (اگر داری)

  // Helper‌های فانکشنال
  blogPost: (slug: string) => `${API_BASE}/api/blog/posts/${encodeURIComponent(slug)}/`,
};


// src\lib\client-csrf.ts

import { endpoints } from './api';

export async function ensureCsrf() {
  await fetch(endpoints.csrf, { credentials: 'include' });
}

export function getCsrfFromCookie() {
  const m = document.cookie.split('; ').find((r) => r.startsWith('csrftoken='));
  return m?.split('=')[1];
}

export async function postWithCsrf(url: string, body: any) {
  await ensureCsrf();
  const csrftoken = getCsrfFromCookie();
  const res = await fetch(url, {
    method: 'POST',
    credentials: 'include',
    headers: {
      'Content-Type': 'application/json',
      ...(csrftoken ? { 'X-CSRFToken': csrftoken } : {}),
    },
    body: JSON.stringify(body ?? {}),
  });
  if (!res.ok) {
    let msg = 'Request failed';
    try { const data = await res.json(); msg = (data.detail || JSON.stringify(data)); } catch {}
    throw new Error(msg);
  }
  try { return await res.json(); } catch { return {}; }
}


// src\lib\server-api.ts


import { cookies } from 'next/headers';
import { endpoints } from './api';

export async function getMe() {
  const cookieStore = await cookies();
  const cookieHeader = cookieStore.getAll().map(({ name, value }) => `${name}=${value}`).join('; ');

  const res = await fetch(endpoints.me, {
    method: 'GET',
    headers: { Cookie: cookieHeader },
    cache: 'no-store',
  });
  if (!res.ok) return null;
  return res.json();
}


// src\lib\server-fetch.ts

import { cookies } from "next/headers";

export async function serverFetch(input: RequestInfo | URL, init?: RequestInit & { revalidate?: number }) {
  const cookieStore = await cookies();
  const cookieHeader = cookieStore.getAll().map(({ name, value }) => `${name}=${value}`).join("; ");

  const { revalidate, ...rest } = init || {};
  const res = await fetch(input, {
    // اگر دادهٔ قابل cache است:
    next: (typeof revalidate === "number" ? { revalidate } : undefined),
    headers: {
      ...(cookieHeader ? { Cookie: cookieHeader } : {}),
      ...(rest.headers || {}),
    },
    // SSR است؛ نیازی به credentials:'include' نیست، ولی اشکالی هم ندارد
    ...rest,
  });

  return res;
}



// src\app\shop\page.tsx

import styles from './Shop.module.css';
import Link from 'next/link';
import Image from 'next/image';
import Filters from '@/components/shop/Filters';
import SortBar from '@/components/shop/SortBar';
import ProductCard from '@/components/ProductCard';
import { endpoints } from '@/lib/api';
import { serverFetch } from "@/lib/server-fetch";


const PAGE_SIZE = 12;

async function fetchProducts(params: Record<string, string>) {
  // فقط پارامترهای تعریف‌شده و غیرخالی به URL اضافه شوند
  const usp = new URLSearchParams({ page_size: String(PAGE_SIZE) });
  Object.entries(params).forEach(([k, v]) => {
    if (v != null && v !== "" && v !== "undefined" && v !== "null") {
      usp.set(k, String(v));
    }
  });

  const url = `${endpoints.products}?${usp.toString()}`;

  // مهم: از serverFetch استفاده می‌کنیم تا کوکی کاربر پاس شود و زیر Throttle کاربر حساب شود
  const res = await serverFetch(url, { method: "GET", revalidate: 300 });

  if (!res.ok) {
    let body = "";
    try { body = await res.text(); } catch {}
    throw new Error(`Failed to load products: ${res.status} ${res.statusText}\nURL: ${url}\nBody: ${body}`);
  }
  return res.json();
}


export default async function ShopPage({
  searchParams,
}: {
  searchParams: Record<string, string | string[] | undefined>;
}) {
  const s = {
    q: typeof searchParams.q === 'string' ? searchParams.q : undefined,
    cat: typeof searchParams.cat === 'string' ? searchParams.cat : undefined,
    brand: typeof searchParams.brand === 'string' ? searchParams.brand : undefined,
    min: typeof searchParams.min === 'string' ? searchParams.min : undefined,
    max: typeof searchParams.max === 'string' ? searchParams.max : undefined,
    sort: (['latest','price-asc','price-desc','rating'] as const).includes(searchParams.sort as any)
      ? (searchParams.sort as string)
      : 'latest',
    page: typeof searchParams.page === 'string' ? searchParams.page : '1',
  } as Record<string, string>;

  const { items, pages, page, total, facets } = await fetchProducts(s);

  return (
    <div className={styles.root} dir="rtl">
      <section className={styles.hero}>
        <div className="container">
          <div className={styles.bc}>
            <Link href="/" className={styles.bcLink}>خانه</Link>
            <span className={styles.bcSep}>/</span>
            <span className={styles.bcHere}>فروشگاه</span>
          </div>
          <h1 className={styles.title}>فروشگاه</h1>
          <p className={styles.subtitle}>{total} کالا؛ هرچی پتت لازم داره همین‌جاست ✨</p>
        </div>
      </section>

      <section className="container">
        <div className={styles.grid}>
          <aside className={styles.sidebar}>
            <Filters facets={facets} current={s as any} className={styles.filterCard} />
          </aside>

          <div className={styles.main}>
            <SortBar total={total} current={s as any} className={styles.sortbar} />

            {items.length === 0 ? (
              <div className={styles.empty}>
                <Image src="/publicimages/p6.jpg" alt="" width={80} height={80} />
                <p>نتیجه‌ای پیدا نشد. فیلترها را تغییر بده.</p>
                <Link href="/shop" className="btn">پاک کردن فیلترها</Link>
              </div>
            ) : (
              <div className={styles.prodGrid}>
                {items.map((p: any) => (
                  <ProductCard key={p.id} product={p} />
                ))}
              </div>
            )}

            <div className={styles.pagination}>
              {Array.from({ length: pages }, (_, i) => i + 1).map((n) => {
                const params = new URLSearchParams(
                  Object.entries(s).reduce((acc, [k, v]) => { if (v) acc[k] = String(v); return acc; }, {} as Record<string, string>)
                );
                params.set('page', String(n));
                const href = `/shop?${params.toString()}`;
                const isCurrent = Number(page) === n;
                return (
                  <Link
                    key={n}
                    href={href}
                    className={`${styles.pageBtn} ${isCurrent ? styles.pageCurrent : ''}`}
                    aria-current={isCurrent ? 'page' : undefined}
                  >
                    {n}
                  </Link>
                );
              })}
            </div>
          </div>
        </div>
      </section>
    </div>
  );
}



// src\components\shop\Filters.tsx
'use client';

import { useMemo, useState } from 'react';
import { usePathname, useRouter, useSearchParams } from 'next/navigation';
import styles from '@/app/shop/Shop.module.css';

type Search = {
  q?: string; cat?: string; brand?: string; min?: string; max?: string;
  sort?: 'latest'|'price-asc'|'price-desc'|'rating'; page?: string;
};

export default function Filters({
  facets,
  current,
  className,
}: {
  facets: { categories: { key: string; label: string }[]; brands: string[] };
  current: Search;
  className?: string;
}) {
  const [open, setOpen] = useState(false); // برای موبایل
  const pathname = usePathname();
  const router = useRouter();
  const sp = useSearchParams();

  const [q, setQ] = useState(current.q || '');
  const [min, setMin] = useState(current.min || '');
  const [max, setMax] = useState(current.max || '');
  const cat = current.cat || '';
  const brand = current.brand || '';

  const setParam = (patch: Partial<Search>) => {
    const next = new URLSearchParams(sp.toString());
    Object.entries(patch).forEach(([k, v]) => {
      if (v === undefined || v === null || v === '') next.delete(k);
      else next.set(k, String(v));
    });
    next.delete('page'); // هر تغییر فیلتر، بره صفحه 1
    router.push(`${pathname}?${next.toString()}`, { scroll: false });
  };

  const clearAll = () => {
    router.push(`${pathname}`, { scroll: false });
  };

  const selected = useMemo(() => {
    const chips: { key: string; label: string }[] = [];
    if (cat) chips.push({ key: 'cat', label: facets.categories.find(c=>c.key===cat)?.label || '' });
    if (brand) chips.push({ key: 'brand', label: brand });
    if (min) chips.push({ key: 'min', label: `از ${Number(min).toLocaleString('fa-IR')}` });
    if (max) chips.push({ key: 'max', label: `تا ${Number(max).toLocaleString('fa-IR')}` });
    if (q) chips.push({ key: 'q', label: `جستجو: ${q}` });
    return chips;
  }, [cat, brand, min, max, q, facets.categories]);

  return (
    <div className={className}>
      {/* Mobile toggle */}
      <button
        type="button"
        className={styles.filterToggle}
        onClick={()=>setOpen(o=>!o)}
        aria-expanded={open}
        aria-controls="filters-panel"
        title={open ? 'بستن فیلترها' : 'باز کردن فیلترها'}
      >
        {open ? 'بستن فیلترها ▲' : 'باز کردن فیلترها ▼'}
      </button>

      <div id="filters-panel" className={`${styles.filterPanel} ${open ? styles.open : ''}`}>
        {/* جستجو */}
        <div className={styles.filterBlock}>
          <label className={styles.blockTitle} htmlFor="q-input">جستجو</label>
          <div className={styles.row}>
            {/* از styles.select برای رنگ/کنتراست ورودی‌ها استفاده می‌کنیم */}
            <input
              id="q-input"
              className={styles.select}
              placeholder="نام/برند"
              value={q}
              onChange={(e)=>setQ(e.target.value)}
            />
            <button
              type="button"
              onClick={()=>setParam({ q })}
              title="اجرای جستجو"
              /* تضمین کنتراست با توکن‌ها */
              style={{
                background: 'var(--btn-bg)',
                color: 'var(--on-primary)',
                border: '1px solid var(--btn-bg-press)',
                borderRadius: '10px',
                padding: '10px 12px',
                fontWeight: 800,
                boxShadow: '0 10px 18px color-mix(in oklab, var(--btn-bg) 20%, transparent)',
                transition: 'filter .2s ease',
              }}
              onMouseOver={(e)=>((e.currentTarget.style.filter='brightness(1.05)'))}
              onMouseOut={(e)=>((e.currentTarget.style.filter=''))}
            >
              جستجو
            </button>
          </div>
        </div>

        {/* دسته‌بندی */}
        <div className={styles.filterBlock}>
          <span className={styles.blockTitle}>دسته‌بندی</span>
          <div className={styles.chips} role="group" aria-label="فیلتر بر اساس دسته‌بندی">
            {facets.categories.map(c => {
              const on = current.cat === c.key;
              return (
                <button
                  key={c.key}
                  type="button"
                  className={`${styles.chip} ${on ? styles.chipOn : ''}`}
                  onClick={()=> setParam({ cat: on ? '' : c.key })}
                  aria-pressed={on}
                  title={on ? `حذف فیلتر ${c.label}` : `اعمال فیلتر ${c.label}`}
                >
                  {c.label}
                </button>
              );
            })}
          </div>
        </div>

        {/* برند */}
        <div className={styles.filterBlock}>
          <label className={styles.blockTitle} htmlFor="brand-select">برند</label>
          <select
            id="brand-select"
            className={styles.select}
            value={brand}
            onChange={(e)=> setParam({ brand: e.target.value })}
            title="انتخاب برند"
          >
            <option value="">همه برندها</option>
            {facets.brands.map(b => <option key={b} value={b}>{b}</option>)}
          </select>
        </div>

        {/* قیمت */}
        <div className={styles.filterBlock}>
          <label className={styles.blockTitle} htmlFor="min-input">قیمت (تومان)</label>
          <div className={styles.row}>
            <input
              id="min-input"
              className={styles.select}
              inputMode="numeric"
              placeholder="حداقل"
              value={min}
              onChange={e=>setMin(e.target.value)}
            />
            <input
              id="max-input"
              className={styles.select}
              inputMode="numeric"
              placeholder="حداکثر"
              value={max}
              onChange={e=>setMax(e.target.value)}
            />
            <button
              type="button"
              onClick={()=> setParam({ min, max })}
              title="اعمال بازهٔ قیمت"
              style={{
                background: 'var(--btn-bg)',
                color: 'var(--on-primary)',
                border: '1px solid var(--btn-bg-press)',
                borderRadius: '10px',
                padding: '10px 12px',
                fontWeight: 800,
                boxShadow: '0 10px 18px color-mix(in oklab, var(--btn-bg) 20%, transparent)',
                transition: 'filter .2s ease',
              }}
              onMouseOver={(e)=>((e.currentTarget.style.filter='brightness(1.05)'))}
              onMouseOut={(e)=>((e.currentTarget.style.filter=''))}
            >
              اعمال
            </button>
          </div>
        </div>

        {/* انتخاب‌ها */}
        {selected.length > 0 && (
          <div className={styles.selected}>
            <div className={styles.selTitle}>فیلترهای فعال</div>
            <div className={styles.selChips}>
              {selected.map(ch => (
                <span key={ch.key} className={styles.selChip}>
                  {ch.label}
                  <button
                    type="button"
                    onClick={()=> setParam({ [ch.key]: '' } as any)}
                    aria-label={`حذف فیلتر ${ch.label}`}
                    title={`حذف فیلتر ${ch.label}`}
                  >
                    ✕
                  </button>
                </span>
              ))}
              <button
                type="button"
                className={styles.clearAll}
                onClick={clearAll}
                title="پاک کردن همه فیلترها"
              >
                پاک کردن همه
              </button>
            </div>
          </div>
        )}
      </div>
    </div>
  );
}



// src\components\shop\SortBar.tsx
'use client';

import { usePathname, useRouter, useSearchParams } from 'next/navigation';
import styles from '@/app/shop/Shop.module.css';

type Search = {
  q?: string; cat?: string; brand?: string; min?: string; max?: string;
  sort?: 'latest'|'price-asc'|'price-desc'|'rating'; page?: string;
};

export default function SortBar({
  total,
  current,
  className,
}: {
  total: number;
  current: Search;
  className?: string;
}) {
  const pathname = usePathname();
  const router = useRouter();
  const sp = useSearchParams();

  const setSort = (sort: NonNullable<Search['sort']>) => {
    const q = new URLSearchParams(sp.toString());
    q.set('sort', sort);
    q.delete('page'); // برگرد ابتدای لیست
    router.push(`${pathname}?${q.toString()}`, { scroll: false });
  };

  return (
    <div className={`${styles.sortbar} ${className || ''}`} role="region" aria-label="مرتب‌سازی و شمارش نتایج">
      <div className={styles.count} title={`${total.toLocaleString('fa-IR')} کالا`}>
        <strong>{total.toLocaleString('fa-IR')}</strong> کالا
      </div>

      <div className={styles.sorts}>
        <label htmlFor="sort" title="مرتب‌سازی نتایج">مرتب‌سازی:</label>
        <select
          id="sort"
          className={styles.select}
          value={current.sort || 'latest'}
          onChange={(e)=> setSort(e.target.value as any)}
          title="انتخاب ترتیب نمایش"
        >
          <option value="latest">جدیدترین</option>
          <option value="price-asc">ارزان‌ترین</option>
          <option value="price-desc">گران‌ترین</option>
          <option value="rating">محبوب‌ترین</option>
        </select>
      </div>
    </div>
  );
}


// src\components\ProductCard.tsx
'use client';

// ساختار اصلی حفظ شده (anchor + Image با width/height و onLoadingComplete)
import Image from 'next/image';
import styles from './ProductCard.module.css';
import { useCartStore } from '@/store/cart';
import { useCartUI } from '@/store/cart-ui';
import { useState } from 'react';

type Product = {
  id: number;
  title: string;
  price: number;
  image?: string | null;
  rating?: number;
  inStock?: boolean;    // کلاینتی
  in_stock?: boolean;   // از API
  stock?: number;       // از API
  badge?: string | null;
  category?: string;
  brand?: string;
};

export default function ProductCard({ product }: { product: Product }) {
  const add = useCartStore((s) => s.add);
  const openCart = useCartUI((s) => s.openCart);

  const stockVal = typeof product.stock === 'number' ? product.stock : undefined;

  // اگر stock داریم، مرجع تصمیم فقط stock>0 است
  const inStock =
    stockVal !== undefined
      ? stockVal > 0
      : (product.inStock ?? product.in_stock ?? true);

  const [shape, setShape] = useState<'portrait' | 'landscape' | 'square' | ''>('');

  const handleAdd = () => {
    add(
      {
        id: product.id,
        title: product.title,
        price: product.price,
        image: product.image || undefined,
        stock: stockVal, // برای clamp تعداد در استور
      },
      1
    );
    openCart();
  };

  return (
    <div className={styles.card}>
      <a
        href={`/product/${product.id}`}
        className={`${styles.thumb} ${shape ? styles[shape] : ''}`}
        aria-label={product.title}
      >
        <Image
          src={product.image || '/publicimages/hero22.png'}
          alt={product.title || ''}
          width={800}
          height={800}
          sizes="(max-width: 640px) 100vw, (max-width: 1024px) 33vw, 300px"
          priority={false}
          loading="lazy"
          decoding="async"
          onLoadingComplete={(img) => {
            const w = img.naturalWidth || 1;
            const h = img.naturalHeight || 1;
            if (Math.abs(w - h) / Math.max(w, h) < 0.04) {
              setShape('square');
            } else if (h > w) {
              setShape('portrait');
            } else {
              setShape('landscape');
            }
          }}
          className={styles.img}
        />

        {/* نشان سفارشی محصول */}
        {product.badge && <span className={styles.badge}>{product.badge}</span>}

        {/* وضعیت موجودی */}
        {!inStock ? (
          <span className={styles.badgeOut} aria-live="polite">
            ناموجود
          </span>
        ) : typeof stockVal === 'number' && stockVal > 0 ? (
          <span className={styles.stockBadge} aria-live="polite">
            موجودی {stockVal}
          </span>
        ) : null}

        {/* جلوه نور ملایم */}
        <span aria-hidden className={styles.shine} />
      </a>

      <div className={styles.body}>
        {/* ردیف مشترک: عنوان در راست، برند در چپ */}
        <div className={styles.head}>
          <div id={`p-title-${product.id}`} className={styles.title} title={product.title}>
            {product.title}
          </div>
          {product.brand && (
            <div className={styles.brand} title={`برند ${product.brand}`} aria-label={`برند ${product.brand}`}>
              {product.brand}
            </div>
          )}
        </div>

        <div className={styles.meta}>
          <div className={styles.price}>
            {product.price.toLocaleString('fa-IR')} <span className={styles.tmn}>تومان</span>
          </div>

          {typeof product.rating === 'number' && (
            <div className={styles.rating} aria-label={`امتیاز ${product.rating}`} style={{ ['--rating' as any]: product.rating }}>
              <span className={styles.stars} aria-hidden />
              <span className={styles.ratingNum}>{product.rating}</span>
            </div>
          )}
        </div>

        <button
          className={styles.addBtn}
          onClick={handleAdd}
          disabled={!inStock}
          aria-disabled={!inStock}
          aria-label={inStock ? 'افزودن به سبد' : 'ناموجود'}
          title={!inStock ? 'این محصول موجود نیست' : undefined}
        >
          افزودن به سبد
        </button>
      </div>
    </div>
  );
}



