پتشاپ اینترنتی
توسعه با
Django + NextJs

name : werch_app
backend: werchaback

front: werchaui




# Werch_app\Werchaback\werchaapi\settings.py

"""
Django settings for werchaapi project.
Clean, env-driven, production-ready.
"""

import os
from pathlib import Path
import environ

# ────────────────────────────────────────────────────────────────────────────────
# Paths & Env
# ────────────────────────────────────────────────────────────────────────────────
BASE_DIR = Path(__file__).resolve().parent.parent

env = environ.Env(
    DEBUG=(bool, False),
)

# .env محلی برای توسعه (روی سرور نیازی نیست)
environ.Env.read_env(os.path.join(BASE_DIR, '.env'))

SECRET_KEY = env('SECRET_KEY', default='dev-insecure-override-me')
DEBUG = env.bool('DEBUG', default=False)
ALLOWED_HOSTS = env.list('ALLOWED_HOSTS', default=['localhost', '127.0.0.1'])

# ────────────────────────────────────────────────────────────────────────────────
# Apps
# ────────────────────────────────────────────────────────────────────────────────
INSTALLED_APPS = [
    # Django core
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    # Project apps
    'accounts',
    'catalog',
    'orders',
    'blog',

    # Third-party
    'rest_framework',
    'corsheaders',
]

# ────────────────────────────────────────────────────────────────────────────────
# Middleware
# ────────────────────────────────────────────────────────────────────────────────
MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',  # باید اول از CommonMiddleware باشد
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

# ────────────────────────────────────────────────────────────────────────────────
# URLs / WSGI / TEMPLATES
# ────────────────────────────────────────────────────────────────────────────────
ROOT_URLCONF = 'werchaapi.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'werchaapi.wsgi.application'

# ────────────────────────────────────────────────────────────────────────────────
# Database (env-driven; default = sqlite for dev)
# ────────────────────────────────────────────────────────────────────────────────
# مثال env در سرور:
# DATABASE_URL=postgres://werch_user:STRONG_PASS@postgres:5432/werch_db
DATABASES = {
    'default': env.db('DATABASE_URL', default=f"sqlite:///{BASE_DIR / 'db.sqlite3'}")
}
DATABASES['default']['CONN_MAX_AGE'] = env.int('CONN_MAX_AGE', default=60)

# ────────────────────────────────────────────────────────────────────────────────
# Auth
# ────────────────────────────────────────────────────────────────────────────────
AUTH_USER_MODEL = 'accounts.User'
AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',
    'accounts.auth_backends.EmailOrUsernameBackend',
]

# ────────────────────────────────────────────────────────────────────────────────
# DRF
# ────────────────────────────────────────────────────────────────────────────────
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.SessionAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
    'DEFAULT_THROTTLE_CLASSES': [
        'rest_framework.throttling.ScopedRateThrottle',   # ← جدید
        'rest_framework.throttling.AnonRateThrottle',
        'rest_framework.throttling.UserRateThrottle',
    ],
    'DEFAULT_THROTTLE_RATES': {
        'anon': '1000/day',           # ← افزایش برای مهمان‌ها
        'user': '20000/day',
        'login': '5/min',
        'public_read': '300/min',     # ← اسکوپ جدید برای GETهای عمومی (بلاگ/کاتالوگ)
    },
}

# ────────────────────────────────────────────────────────────────────────────────
# i18n / tz
# ────────────────────────────────────────────────────────────────────────────────
LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_TZ = True

# ────────────────────────────────────────────────────────────────────────────────
# Static / Media
# ────────────────────────────────────────────────────────────────────────────────
STATIC_URL = '/static/'
STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]
STATIC_ROOT = BASE_DIR / 'staticfiles'   # برای collectstatic در پرود
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# ────────────────────────────────────────────────────────────────────────────────
# CORS / CSRF (از ENV بخوان)
# ────────────────────────────────────────────────────────────────────────────────
CORS_ALLOW_CREDENTIALS = True
CORS_ALLOWED_ORIGINS = env.list('CORS_ALLOWED_ORIGINS', default=['http://localhost:3000'])
CSRF_TRUSTED_ORIGINS = env.list('CSRF_TRUSTED_ORIGINS', default=['http://localhost:3000'])

# ────────────────────────────────────────────────────────────────────────────────
# Security (همه از ENV قابل کنترل)
# ────────────────────────────────────────────────────────────────────────────────
SESSION_COOKIE_HTTPONLY = True
CSRF_COOKIE_HTTPONLY = False  # فرانت نیاز به خواندن CSRF دارد
SESSION_COOKIE_SAMESITE = 'Lax'
CSRF_COOKIE_SAMESITE = 'Lax'

# وقتی SSL ندارید → SECURE_SSL_REDIRECT=False در ENV سرور
SECURE_SSL_REDIRECT = env.bool('SECURE_SSL_REDIRECT', default=not DEBUG)

SESSION_COOKIE_SECURE = env.bool('SESSION_COOKIE_SECURE', default=not DEBUG)
CSRF_COOKIE_SECURE   = env.bool('CSRF_COOKIE_SECURE',   default=not DEBUG)

SECURE_HSTS_SECONDS            = env.int('SECURE_HSTS_SECONDS', default=(0 if DEBUG else 31536000))
SECURE_HSTS_INCLUDE_SUBDOMAINS = env.bool('SECURE_HSTS_INCLUDE_SUBDOMAINS', default=not DEBUG)
SECURE_HSTS_PRELOAD            = env.bool('SECURE_HSTS_PRELOAD', default=not DEBUG)

# پشت Nginx/Proxy
SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')


# Werch_app\Werchaback\catalog\models.py

import uuid
from django.db import models
from django.utils.text import slugify
from django.db.models import Q

class Category(models.Model):
    # مثال: key = 'dog' | 'cat' | 'bird' | 'small'
    key = models.SlugField(max_length=50, unique=True, db_index=True)
    label = models.CharField(max_length=100)

    class Meta:
        verbose_name = 'Category'
        verbose_name_plural = 'Categories'

    def __str__(self):
        return self.label


class Brand(models.Model):
    name = models.CharField(max_length=100, unique=True)
    slug = models.SlugField(max_length=120, unique=True, blank=True)

    def save(self, *args, **kwargs):
        if not self.slug:
            self.slug = slugify(self.name)
        return super().save(*args, **kwargs)

    def __str__(self):
        return self.name


class Product(models.Model):
    BADGE_CHOICES = (
        ('sale', 'حراج'),
        ('new', 'جدید'),
    )

    id = models.BigAutoField(primary_key=True)
    title = models.CharField(max_length=200)
    slug = models.SlugField(max_length=220, unique=True)

    # قیمت را برای ساده‌سازی به تومان (عدد صحیح) نگه می‌داریم
    price = models.PositiveIntegerField()

    description = models.TextField(blank=True)
    category = models.ForeignKey(Category, on_delete=models.PROTECT, related_name='products')
    brand = models.ForeignKey(Brand, on_delete=models.PROTECT, related_name='products')

    # موجودی و وضعیت موجودی
    in_stock = models.BooleanField(default=True)
    stock = models.PositiveIntegerField(default=0)

    rating = models.FloatField(default=0)
    badge = models.CharField(max_length=10, choices=BADGE_CHOICES, blank=True, null=True)

    image = models.ImageField(upload_to='products/', blank=True, null=True)

    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    class Meta:
        ordering = ['-id']
        indexes = [
            models.Index(fields=['slug']),
            models.Index(fields=['price']),
            models.Index(fields=['category']),
            models.Index(fields=['brand']),
            # (اختیاری) اگر زیاد فیلتر می‌کنی، این هم مفید است:
            # models.Index(fields=['in_stock']),
        ]
        constraints = [
            # اگر in_stock=True باشد، باید stock>0 باشد
            models.CheckConstraint(
                name='in_stock_requires_positive_stock',
                check=Q(in_stock=False) | Q(stock__gt=0),
            ),
        ]

    def __str__(self):
        return self.title

    def save(self, *args, **kwargs):
        # همگام‌سازی خودکار وضعیت موجودی با عدد موجودی
        self.in_stock = self.stock > 0
        super().save(*args, **kwargs)

    @property
    def badge_label(self):
        if not self.badge:
            return None
        return dict(self.BADGE_CHOICES).get(self.badge)


class ProductImage(models.Model):
    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    product = models.ForeignKey(Product, on_delete=models.CASCADE, related_name='images')
    image = models.ImageField(upload_to='products/gallery/')
    alt = models.CharField(max_length=200, blank=True)

    def __str__(self):
        return f"Image of {self.product_id}"



# Werch_app\Werchaback\catalog\serializers.py

from rest_framework import serializers
from .models import Product, ProductImage


class ProductListSerializer(serializers.ModelSerializer):
    image = serializers.SerializerMethodField()
    category = serializers.CharField(source='category.key')
    brand = serializers.CharField(source='brand.name')
    badge = serializers.SerializerMethodField()
    slug = serializers.CharField() 

    class Meta:
        model = Product
        fields = (
            'id', 'slug', 'title', 'price', 'image',
            'rating', 'in_stock', 'stock', 'badge', 'category', 'brand'
        )

    def get_image(self, obj):
        req = self.context.get('request')
        if obj.image and hasattr(obj.image, 'url'):
            url = obj.image.url
            return req.build_absolute_uri(url) if req else url
        return None

    def get_badge(self, obj):
        return obj.badge_label


class ProductDetailSerializer(ProductListSerializer):
    images = serializers.SerializerMethodField()
    description = serializers.CharField()
    slug = serializers.CharField()

    class Meta(ProductListSerializer.Meta):
        fields = ProductListSerializer.Meta.fields + ('description', 'slug', 'images')

    def get_images(self, obj):
        req = self.context.get('request')
        out = []
        for im in obj.images.all():
            url = im.image.url
            out.append({
                'url': req.build_absolute_uri(url) if req else url,
                'alt': im.alt or '',
            })
        return out



# Werch_app\Werchaback\catalog\views.py

from math import ceil
from django.db.models import Q
from rest_framework.views import APIView
from rest_framework.response import Response
from rest_framework import permissions
from .models import Product, Category, Brand
from .serializers import ProductListSerializer, ProductDetailSerializer



class ProductListView(APIView):
    permission_classes = [permissions.AllowAny]
    throttle_scope = 'public_read'

    def get(self, request):
        qs = Product.objects.select_related('category', 'brand').all()

        # دریافت پارامترها
        q = request.query_params.get('q')
        cat = request.query_params.get('cat')
        brand = request.query_params.get('brand')
        min_price = request.query_params.get('min')
        max_price = request.query_params.get('max')
        sort = request.query_params.get('sort', 'latest')
        page = int(request.query_params.get('page', '1'))
        page_size = int(request.query_params.get('page_size', '12'))

        # نرمال‌سازی مقادیر مشکوک
        def _clean(v):
            return None if v in (None, '', 'undefined', 'null') else v

        q = _clean(q)
        cat = _clean(cat)
        brand = _clean(brand)
        min_price = _clean(min_price)
        max_price = _clean(max_price)

        # تبدیل امن به عدد
        try:
            if min_price is not None:
                min_price = int(min_price)
        except ValueError:
            min_price = None

        try:
            if max_price is not None:
                max_price = int(max_price)
        except ValueError:
            max_price = None

        # اعمال فیلترها
        if q:
            qs = qs.filter(Q(title__icontains=q) | Q(brand__name__icontains=q))
        if cat:
            qs = qs.filter(category__key=cat)
        if brand:
            qs = qs.filter(brand__name=brand)
        if min_price is not None:
            qs = qs.filter(price__gte=min_price)
        if max_price is not None:
            qs = qs.filter(price__lte=max_price)

        # مرتب‌سازی
        if sort == 'price-asc':
            qs = qs.order_by('price')
        elif sort == 'price-desc':
            qs = qs.order_by('-price')
        elif sort == 'rating':
            qs = qs.order_by('-rating')
        else:  # latest
            qs = qs.order_by('-id')

        # صفحه‌بندی
        total = qs.count()
        pages = max(1, ceil(total / page_size))
        page = max(1, min(page, pages))
        start = (page - 1) * page_size
        items = qs[start:start + page_size]

        # سریالایزر
        ser = ProductListSerializer(items, many=True, context={'request': request})

        # فست‌ها (facets)
        categories = list(Category.objects.values('key', 'label'))
        brands = list(Brand.objects.order_by('name').values_list('name', flat=True))

        return Response({
            'items': ser.data,
            'total': total,
            'pages': pages,
            'page': page,
            'facets': {
                'categories': categories,
                'brands': brands,
            }
        })


class ProductDetailView(APIView):
    permission_classes = [permissions.AllowAny]

    def get(self, request, slug):
        try:
            p = Product.objects.select_related('category', 'brand').prefetch_related('images').get(slug=slug)
        except Product.DoesNotExist:
            return Response({'detail': 'Not found.'}, status=404)
        ser = ProductDetailSerializer(p, context={'request': request})
        return Response(ser.data)



# Werch_app\Werchaback\catalog\urls.py

from django.urls import path
from .views import ProductListView, ProductDetailView

urlpatterns = [
    path('products/', ProductListView.as_view(), name='product-list'),
    path('products/<slug:slug>/', ProductDetailView.as_view(), name='product-detail'),
]




// src\app\shop\page.tsx

import styles from './Shop.module.css';
import Link from 'next/link';
import Image from 'next/image';
import Filters from '@/components/shop/Filters';
import SortBar from '@/components/shop/SortBar';
import ProductCard from '@/components/ProductCard';
import { endpoints } from '@/lib/api';
import { serverFetch } from "@/lib/server-fetch";


const PAGE_SIZE = 12;

export const metadata = {
  title: "فروشگاه",
  description: "فروشگاه ورچینو",
};

async function fetchProducts(params: Record<string, string>) {
  // فقط پارامترهای تعریف‌شده و غیرخالی به URL اضافه شوند
  const usp = new URLSearchParams({ page_size: String(PAGE_SIZE) });
  Object.entries(params).forEach(([k, v]) => {
    if (v != null && v !== "" && v !== "undefined" && v !== "null") {
      usp.set(k, String(v));
    }
  });

  const url = `${endpoints.products}?${usp.toString()}`;

  // مهم: از serverFetch استفاده می‌کنیم تا کوکی کاربر پاس شود و زیر Throttle کاربر حساب شود
  const res = await serverFetch(url, { method: "GET", revalidate: 300 });

  if (!res.ok) {
    let body = "";
    try { body = await res.text(); } catch {}
    throw new Error(`Failed to load products: ${res.status} ${res.statusText}\nURL: ${url}\nBody: ${body}`);
  }
  return res.json();
}


export default async function ShopPage({
  searchParams,
}: {
  searchParams: Record<string, string | string[] | undefined>;
}) {
  const s = {
    q: typeof searchParams.q === 'string' ? searchParams.q : undefined,
    cat: typeof searchParams.cat === 'string' ? searchParams.cat : undefined,
    brand: typeof searchParams.brand === 'string' ? searchParams.brand : undefined,
    min: typeof searchParams.min === 'string' ? searchParams.min : undefined,
    max: typeof searchParams.max === 'string' ? searchParams.max : undefined,
    sort: (['latest','price-asc','price-desc','rating'] as const).includes(searchParams.sort as any)
      ? (searchParams.sort as string)
      : 'latest',
    page: typeof searchParams.page === 'string' ? searchParams.page : '1',
  } as Record<string, string>;

  const { items, pages, page, total, facets } = await fetchProducts(s);

  return (
    <div className={styles.root} dir="rtl">
      <section className={styles.hero}>
        <div className="container">
          <div className={styles.bc}>
            <Link href="/" className={styles.bcLink}>خانه</Link>
            <span className={styles.bcSep}>/</span>
            <span className={styles.bcHere}>فروشگاه</span>
          </div>
          <h1 className={styles.title}>فروشگاه</h1>
          <p className={styles.subtitle}>{total} کالا؛ هرچی پتت لازم داره همین‌جاست ✨</p>
        </div>
      </section>

      <section className="container">
        <div className={styles.grid}>
          <aside className={styles.sidebar}>
            <Filters facets={facets} current={s as any} className={styles.filterCard} />
          </aside>

          <div className={styles.main}>
            <SortBar total={total} current={s as any} className={styles.sortbar} />

            {items.length === 0 ? (
              <div className={styles.empty}>
                <Image src="/publicimages/p6.jpg" alt="" width={80} height={80} />
                <p>نتیجه‌ای پیدا نشد. فیلترها را تغییر بده.</p>
                <Link href="/shop" className="btn">پاک کردن فیلترها</Link>
              </div>
            ) : (
              <div className={styles.prodGrid}>
                {items.map((p: any) => (
                  <ProductCard key={p.id} product={p} />
                ))}
              </div>
            )}

            <div className={styles.pagination}>
              {Array.from({ length: pages }, (_, i) => i + 1).map((n) => {
                const params = new URLSearchParams(
                  Object.entries(s).reduce((acc, [k, v]) => { if (v) acc[k] = String(v); return acc; }, {} as Record<string, string>)
                );
                params.set('page', String(n));
                const href = `/shop?${params.toString()}`;
                const isCurrent = Number(page) === n;
                return (
                  <Link
                    key={n}
                    href={href}
                    className={`${styles.pageBtn} ${isCurrent ? styles.pageCurrent : ''}`}
                    aria-current={isCurrent ? 'page' : undefined}
                  >
                    {n}
                  </Link>
                );
              })}
            </div>
          </div>
        </div>
      </section>
    </div>
  );
}



// src\lib\server-fetch.ts

import { cookies } from "next/headers";

export async function serverFetch(input: RequestInfo | URL, init?: RequestInit & { revalidate?: number }) {
  const cookieStore = await cookies();
  const cookieHeader = cookieStore.getAll().map(({ name, value }) => `${name}=${value}`).join("; ");

  const { revalidate, ...rest } = init || {};
  const res = await fetch(input, {
    // اگر دادهٔ قابل cache است:
    next: (typeof revalidate === "number" ? { revalidate } : undefined),
    headers: {
      ...(cookieHeader ? { Cookie: cookieHeader } : {}),
      ...(rest.headers || {}),
    },
    // SSR است؛ نیازی به credentials:'include' نیست، ولی اشکالی هم ندارد
    ...rest,
  });

  return res;
}



// Detect server vs client
const isServer = typeof window === 'undefined';

// Priority for SSR (Node): INTERNAL first, then NEXT_PUBLIC
// Priority for CSR (Browser): NEXT_PUBLIC only
const rawBase = isServer
  ? (process.env.INTERNAL_API_BASE_URL || process.env.NEXT_PUBLIC_API_BASE_URL || 'http://localhost:8000')
  : (process.env.NEXT_PUBLIC_API_BASE_URL || 'http://localhost:8000');

// Normalize (remove trailing slash)
export const API_BASE = rawBase.replace(/\/$/, '');

export const endpoints = {
  // Accounts
  csrf:       `${API_BASE}/api/accounts/csrf/`,
  register:   `${API_BASE}/api/accounts/register/`,
  login:      `${API_BASE}/api/accounts/login/`,
  logout:     `${API_BASE}/api/accounts/logout/`,
  me:         `${API_BASE}/api/accounts/me/`,

  // Shop
  products:       `${API_BASE}/api/catalog/products/`,
  productDetail:  (slug: string) => `${API_BASE}/api/catalog/products/${encodeURIComponent(slug)}/`,
  orderCreate:    `${API_BASE}/api/orders/create/`,
  lastAddress:    `${API_BASE}/api/orders/last-address/`,

  // Blog
  blogIndex:      `${API_BASE}/api/blog/posts/`,
  blogPosts:      `${API_BASE}/api/blog/posts/`,
  blogCategories: `${API_BASE}/api/blog/categories/`,
  blogRefs:       `${API_BASE}/api/blog/references/`,

  // Helpers
  blogPost: (slug: string) => `${API_BASE}/api/blog/posts/${encodeURIComponent(slug)}/`,
};



// src\lib\client-csrf.ts

import { endpoints } from './api';

export async function ensureCsrf() {
  await fetch(endpoints.csrf, { credentials: 'include' });
}

export function getCsrfFromCookie() {
  const m = document.cookie.split('; ').find((r) => r.startsWith('csrftoken='));
  return m?.split('=')[1];
}

export async function postWithCsrf(url: string, body: any) {
  await ensureCsrf();
  const csrftoken = getCsrfFromCookie();
  const res = await fetch(url, {
    method: 'POST',
    credentials: 'include',
    headers: {
      'Content-Type': 'application/json',
      ...(csrftoken ? { 'X-CSRFToken': csrftoken } : {}),
    },
    body: JSON.stringify(body ?? {}),
  });
  if (!res.ok) {
    let msg = 'Request failed';
    try { const data = await res.json(); msg = (data.detail || JSON.stringify(data)); } catch {}
    throw new Error(msg);
  }
  try { return await res.json(); } catch { return {}; }
}




// src\lib\server-api.ts


import { cookies } from 'next/headers';
import { endpoints } from './api';

export async function getMe() {
  const cookieStore = await cookies();
  const cookieHeader = cookieStore.getAll().map(({ name, value }) => `${name}=${value}`).join('; ');

  const res = await fetch(endpoints.me, {
    method: 'GET',
    headers: { Cookie: cookieHeader },
    cache: 'no-store',
  });
  if (!res.ok) return null;
  return res.json();
}







// Werch_app\werchaui\src\components\search\SearchBox.tsx

'use client';

import { useEffect, useRef, useState } from 'react';
import { usePathname, useRouter, useSearchParams } from 'next/navigation';
import Image from 'next/image';
import { endpoints } from '@/lib/api';
import styles from './SearchBox.module.css';

type ProductHit = {
  id: number;
  slug?: string;
  title: string;
  image?: string | null;
  price: number;
  stock?: number;
};

type Props = {
  id?: string;
  placeholder?: string;
  className?: string;
  inputClassName?: string;
  buttonClassName?: string;
  onSubmitted?: () => void;
};

const STORAGE_KEY = 'petshop-search-recent';
const DEBOUNCE_MS = 250;

export default function SearchBox({
  id = 'site-search',
  placeholder = 'جستجوی محصول، برند، دسته…',
  className,
  inputClassName,
  buttonClassName,
  onSubmitted,
}: Props) {
  const router = useRouter();
  const pathname = usePathname();
  const sp = useSearchParams();

  const [q, setQ] = useState<string>(sp.get('q') || '');
  const [open, setOpen] = useState(false);
  const [loading, setLoading] = useState(false);
  const [hits, setHits] = useState<ProductHit[]>([]);
  const [active, setActive] = useState<number>(-1);
  const [recent, setRecent] = useState<string[]>([]);
  const abortRef = useRef<AbortController | null>(null);
  const boxRef = useRef<HTMLDivElement>(null);
  const listId = `${id}-listbox`;
  const inputId = `${id}-input`;

  // recent searches (load)
  useEffect(() => {
    try {
      const raw = localStorage.getItem(STORAGE_KEY);
      if (raw) setRecent(JSON.parse(raw));
    } catch {}
  }, []);

  const pushRecent = (term: string) => {
    try {
      const prev = recent.filter((r) => r !== term);
      const next = [term, ...prev].slice(0, 7);
      setRecent(next);
      localStorage.setItem(STORAGE_KEY, JSON.stringify(next));
    } catch {}
  };

  // click outside → close
  useEffect(() => {
    const onDoc = (e: MouseEvent) => {
      if (!boxRef.current) return;
      if (!boxRef.current.contains(e.target as Node)) {
        setOpen(false);
        setActive(-1);
      }
    };
    document.addEventListener('mousedown', onDoc);
    return () => document.removeEventListener('mousedown', onDoc);
  }, []);

  // debounce fetch
  useEffect(() => {
    const _clean = (v: any) =>
      v == null || v === '' || v === 'undefined' || v === 'null' ? null : v;

    if (!_clean(q)) {
      setHits([]);
      setOpen(recent.length > 0); // show recent if empty
      return;
    }

    setLoading(true);
    const ctrl = new AbortController();
    abortRef.current?.abort();
    abortRef.current = ctrl;

    const t = setTimeout(async () => {
      try {
        const url = `${endpoints.products}?page_size=5&q=${encodeURIComponent(
          String(q).trim()
        )}`;
        const res = await fetch(url, { signal: ctrl.signal, cache: 'no-store' });
        if (!res.ok) throw new Error('failed');
        const data = await res.json();
        const list = Array.isArray(data?.items) ? data.items : [];
        setHits(
          list.map((p: any) => ({
            id: p.id,
            slug: p.slug,
            title: p.title,
            image: p.image || null,
            price: p.price,
            stock: typeof p.stock === 'number' ? p.stock : undefined,
          }))
        );
        setOpen(true);
        setActive(-1);
      } catch (e) {
        if ((e as any)?.name !== 'AbortError') {
          setHits([]);
          setOpen(false);
        }
      } finally {
        setLoading(false);
      }
    }, DEBOUNCE_MS);

    return () => {
      clearTimeout(t);
      ctrl.abort();
    };
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [q]);

  const goToDetail = (handle: string | number) => {
    router.push(`/shop/${handle}`);
  };

  const onSubmit = (e?: React.FormEvent) => {
    e?.preventDefault();
    const term = q.trim();
    if (!term) return;

    pushRecent(term);

    // go to selected item if any
    if (active >= 0 && hits[active]) {
      const handle = hits[active].slug ?? String(hits[active].id);
      goToDetail(handle);
    } else {
      // otherwise go to search results page
      const params = new URLSearchParams(sp.toString());
      params.set('q', term);
      params.delete('page'); // reset to first page
      router.push(`/shop?${params.toString()}`);
    }

    setOpen(false);
    setActive(-1);
    onSubmitted?.();
  };

  const onKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {
    if (!open && ['ArrowDown', 'ArrowUp'].includes(e.key)) {
      setOpen(true);
      return;
    }
    if (e.key === 'ArrowDown') {
      e.preventDefault();
      setActive((a) => Math.min(a + 1, hits.length - 1));
    } else if (e.key === 'ArrowUp') {
      e.preventDefault();
      setActive((a) => Math.max(a - 1, -1));
    } else if (e.key === 'Enter') {
      e.preventDefault();
      onSubmit();
    } else if (e.key === 'Escape') {
      setOpen(false);
      setActive(-1);
    }
  };

  const showRecent = open && !q.trim() && recent.length > 0;
  const showHits = open && q.trim().length > 0 && hits.length > 0;

  const comboboxAria = {
    role: 'combobox',
    'aria-haspopup': 'listbox' as const,
    'aria-expanded': open,
    'aria-owns': listId,
    'aria-controls': listId,
  };
  const activeDesc = active >= 0 ? `${id}-opt-${hits[active]?.id}` : undefined;

  return (
    <div ref={boxRef} className={`${styles.wrap} ${className || ''}`} dir="rtl">
      <form className={styles.form} onSubmit={onSubmit} {...comboboxAria}>
        <input
          id={inputId}
          className={`${styles.input} ${inputClassName || ''}`}
          name="q"
          placeholder={placeholder}
          aria-autocomplete="list"
          aria-controls={listId}
          aria-activedescendant={activeDesc}
          aria-label="جستجو"
          value={q}
          onChange={(e) => setQ(e.target.value)}
          onFocus={() => setOpen(true)}
          onKeyDown={onKeyDown}
          autoComplete="off"
        />
        <button
          type="submit"
          className={`${styles.btn} ${buttonClassName || ''}`}
          aria-label="جستجو"
        >
          <svg
            width="20"
            height="20"
            viewBox="0 0 24 24"
            fill="none"
            aria-hidden="true"
            xmlns="http://www.w3.org/2000/svg"
          >
            <circle cx="10" cy="10" r="6" stroke="currentColor" strokeWidth="2" />
            <path d="M15 15l6 6" stroke="currentColor" strokeWidth="2" strokeLinecap="round" />
          </svg>
        </button>
      </form>

      {(showHits || showRecent) && (
        <ul id={listId} role="listbox" className={styles.list} aria-label="پیشنهادهای جستجو">
          {showRecent && (
            <>
              <li className={styles.groupTitle} aria-hidden>
                جستجوهای اخیر
              </li>

              {recent.map((term, idx) => {
                const idAttr = `${id}-recent-${idx}`;
                return (
                  <li
                    key={idAttr}
                    id={idAttr}
                    role="option"
                    aria-selected={false}
                    className={`${styles.item} ${styles.recentRow}`}
                    onMouseDown={(e) => e.preventDefault()}
                  >
                    <span className={styles.recentIcon} aria-hidden="true">
                      <svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                        <circle cx="12" cy="12" r="9" stroke="currentColor" strokeWidth="1.8" />
                        <path
                          d="M12 7v5l3 2"
                          stroke="currentColor"
                          strokeWidth="1.8"
                          strokeLinecap="round"
                          strokeLinejoin="round"
                        />
                      </svg>
                    </span>

                    <button
                      type="button"
                      className={styles.recentTerm}
                      title={term}
                      onClick={() => {
                        setQ(term);
                        setTimeout(() => onSubmit(), 0);
                      }}
                    >
                      {term}
                    </button>

                    <button
                      type="button"
                      className={styles.recentRemove}
                      aria-label={`حذف ${term} از جستجوهای اخیر`}
                      title="حذف از تاریخچه"
                      onClick={() => {
                        const next = recent.filter((r) => r !== term);
                        setRecent(next);
                        try {
                          localStorage.setItem(STORAGE_KEY, JSON.stringify(next));
                        } catch {}
                      }}
                    >
                      ×
                    </button>
                  </li>
                );
              })}

              <li className={styles.recentActions}>
                <button
                  type="button"
                  className={styles.clearAllBtn}
                  onClick={() => {
                    setRecent([]);
                    try {
                      localStorage.removeItem(STORAGE_KEY);
                    } catch {}
                  }}
                >
                  پاک کردن همه
                </button>
              </li>

              {q.trim().length > 0 && <li className={styles.separator} aria-hidden />}
            </>
          )}

          {showHits &&
            hits.map((h, i) => {
              const idAttr = `${id}-opt-${h.id}`;
              const selected = i === active;
              return (
                <li
                  key={idAttr}
                  id={idAttr}
                  role="option"
                  aria-selected={selected}
                  className={`${styles.item} ${selected ? styles.itemActive : ''}`}
                  onMouseEnter={() => setActive(i)}
                  onMouseDown={(e) => e.preventDefault()}
                  onClick={() => {
                    const handle = h.slug ?? String(h.id);
                    goToDetail(handle); // ← /shop/[slug]
                    setOpen(false);
                    onSubmitted?.();
                  }}
                >
                  <div className={styles.thumb}>
                    <Image
                      src={h.image || '/publicimages/hero22.png'}
                      alt=""
                      width={40}
                      height={40}
                    />
                  </div>
                  <div className={styles.meta}>
                    <div className={styles.title} title={h.title}>
                      {h.title}
                    </div>
                    <div className={styles.sub}>
                      {h.price.toLocaleString('fa-IR')} تومان
                      {typeof h.stock === 'number' && h.stock >= 0 && (
                        <span className={styles.stock}> • موجودی {h.stock}</span>
                      )}
                    </div>
                  </div>
                </li>
              );
            })}

          {q.trim() && (
            <li
              role="option"
              aria-selected={active === hits.length}
              className={`${styles.item} ${active === hits.length ? styles.itemActive : ''} ${styles.viewAll}`}
              onMouseEnter={() => setActive(hits.length)}
              onMouseDown={(e) => e.preventDefault()}
              onClick={() => onSubmit()}
            >
              مشاهده همه نتایج برای «{q}»
            </li>
          )}
        </ul>
      )}
    </div>
  );
}



// Werch_app\werchaui\src\app\shop\[slug]\page.tsx

import type { Metadata } from 'next';
import Image from 'next/image';
import Link from 'next/link';
import Script from 'next/script';
import styles from './ProductDetail.module.css';
import { endpoints } from '@/lib/api';
import { serverFetch } from '@/lib/server-fetch';
import ProductCard from '@/components/ProductCard';
import Gallery from './Gallery';
import BuyBox from './BuyBox';
import MobileBar from './MobileBar';

const SITE_URL = process.env.NEXT_PUBLIC_SITE_URL || 'http://localhost:3000';

// سازگار با endpoints فعلی/قدیمی
const productDetailUrl = (slug: string) =>
  (endpoints as any).productDetail
    ? (endpoints as any).productDetail(slug)
    : `${endpoints.products}${encodeURIComponent(slug)}/`;

async function fetchProduct(slug: string) {
  const res = await serverFetch(productDetailUrl(slug), { method: 'GET', revalidate: 60 });
  if (!res.ok) throw new Error('NOT_FOUND');
  return res.json();
}

async function fetchRelated(catKey: string, excludeId: number) {
  const url = `${endpoints.products}?cat=${encodeURIComponent(catKey)}&page_size=8&sort=rating`;
  const res = await serverFetch(url, { method: 'GET', revalidate: 300 });
  if (!res.ok) return { items: [] as any[] };
  const data = await res.json();
  return { items: (data.items || []).filter((p: any) => p?.id !== excludeId) };
}

// SEO
export async function generateMetadata({ params }: { params: { slug: string } }): Promise<Metadata> {
  try {
    const p = await fetchProduct(params.slug);
    const title = `${p.title} | Wircino`;
    const desc = (p.description || `خرید ${p.title} با بهترین قیمت`).slice(0, 160);
    const ogImages = p.images?.length ? p.images.map((im: any) => im.url) : (p.image ? [p.image] : []);
    return {
      title,
      description: desc,
      alternates: { canonical: `/shop/${p.slug}` },
      openGraph: { title, description: desc, images: ogImages },
    };
  } catch {
    return { title: 'محصول | Wircino', description: 'جزئیات محصول' };
  }
}

export default async function ProductDetailPage({ params }: { params: { slug: string } }) {
  const p = await fetchProduct(params.slug);
  const related = await fetchRelated(p.category, p.id);
  const inStock = (typeof p.stock === 'number' ? p.stock > 0 : !!p.in_stock);

  const productLd = {
    '@context': 'https://schema.org',
    '@type': 'Product',
    name: p.title,
    image: (p.images?.length ? p.images.map((im: any) => im.url) : [p.image]).filter(Boolean),
    description: p.description || '',
    brand: p.brand ? { '@type': 'Brand', name: p.brand } : undefined,
    sku: String(p.id),
    aggregateRating: typeof p.rating === 'number' && p.rating > 0
      ? { '@type': 'AggregateRating', ratingValue: p.rating, reviewCount: Math.max(1, Math.round(p.rating * 3)) }
      : undefined,
    offers: {
      '@type': 'Offer',
      url: `${SITE_URL}/shop/${p.slug}`,
      priceCurrency: 'IRR',
      price: p.price,
      availability: inStock ? 'https://schema.org/InStock' : 'https://schema.org/OutOfStock',
      itemCondition: 'https://schema.org/NewCondition',
    },
  };

  const breadcrumbLd = {
    '@context': 'https://schema.org',
    '@type': 'BreadcrumbList',
    itemListElement: [
      { '@type': 'ListItem', position: 1, name: 'خانه', item: `${SITE_URL}/` },
      { '@type': 'ListItem', position: 2, name: 'فروشگاه', item: `${SITE_URL}/shop` },
      { '@type': 'ListItem', position: 3, name: p.title, item: `${SITE_URL}/shop/${p.slug}` },
    ],
  };

  return (
    <div className={styles.root} dir="rtl">
      <Script id="ld-product" type="application/ld+json" dangerouslySetInnerHTML={{ __html: JSON.stringify(productLd) }} />
      <Script id="ld-breadcrumb" type="application/ld+json" dangerouslySetInnerHTML={{ __html: JSON.stringify(breadcrumbLd) }} />

      <nav className={styles.bc} aria-label="breadcrumb">
        <Link href="/" className="link link--subtle">خانه</Link>
        <span className={styles.sep}>/</span>
        <Link href="/shop" className="link link--subtle">فروشگاه</Link>
        <span className={styles.sep}>/</span>
        <span aria-current="page" className={styles.here}>{p.title}</span>
      </nav>

      <header className={styles.header}>
        <h1 className={styles.title}>{p.title}</h1>
        <div className={styles.pills}>
          <span className="tag">دسته: {p.category}</span>
          {p.brand && <span className="tag">برند: {p.brand}</span>}
          {p.badge && <span className="badge badge--tip">{p.badge}</span>}
          {typeof p.rating === 'number' && p.rating > 0 && (
            <span className="badge badge--info" title="امتیاز کاربران">⭐ {p.rating.toFixed(1)}</span>
          )}
        </div>
      </header>

      <section className={styles.main}>
        <div className={styles.galleryCol}>
          <Gallery
            main={p.image || '/publicimages/hero22.png'}
            images={(p.images || []).map((im: any) => ({ url: im.url, alt: im.alt || '' }))}
            title={p.title}
          />
        </div>

        <aside className={styles.infoCol}>
          <BuyBox
            id={p.id}
            slug={p.slug}
            title={p.title}
            brand={p.brand}
            price={p.price}
            stock={typeof p.stock === 'number' ? p.stock : (p.in_stock ? 99 : 0)}
            image={p.image || undefined}
          />

          <section className={styles.desc}>
            <h2 className={styles.h2}>توضیحات محصول</h2>
            <p className={styles.descText}>{p.description || '—'}</p>
          </section>
        </aside>
      </section>

      {Array.isArray(related.items) && related.items.length > 0 && (
        <section className={styles.related}>
          <h2 className={styles.h2}>محصولات مشابه</h2>
          <div className={styles.relatedGrid}>
            {related.items.filter(Boolean).map((rp: any) => (
              <ProductCard key={rp.id} product={rp} />
            ))}
          </div>
        </section>
      )}

      {/* نوار خرید موبایل (وقتی BuyBox از دید خارج شد) */}
      <MobileBar
        id={p.id}
        title={p.title}
        price={p.price}
        image={p.image || undefined}
        stock={typeof p.stock === 'number' ? p.stock : (p.in_stock ? 99 : 0)}
      />
    </div>
  );
}




میخوام بفهمم خوب متوجه منطق مسیر محصولاتم شدی؟